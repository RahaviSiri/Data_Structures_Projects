#include <iostream>
#include <chrono>

using namespace std;

// Definition of the node structure
class Node {
    public:
        int value;
        Node* next;
        
        Node(int val) 
        :value(val), next(nullptr) 
        {
    
        }  // Constructor to initialize the node with a value
};

// The top pointer of the stack
Node* Head = nullptr;

// Push function to insert data into the stack
void Push(int value) {
    // Allocate a new node and set its value and next pointer
    Node* newNode = new Node(value);
    newNode->next = Head;
    // Update the top pointer to point to the new node
    Head = newNode;
}

// Pop function to remove/delete data from the stack
void Pop() {
    // If the stack is empty, print a message and return
    if (Head == nullptr) {
        cout << "Stack is empty.\n";
        return;
    }
    // Save the current top node in a temporary variable
    Node* temp = Head;
    // Update the top pointer to point to the next node
    Head = Head->next;
    // Delete the top node
    delete temp;
}

// isEmpty function to check whether the stack is empty or not
bool isEmpty() {
    return Head == nullptr;
}

// isFull function to check whether the stack is full or not
bool isFull() {
    // Linked list implementation doesn't have a fixed size limit, so it's always false.
    return false;
}

// StackTop function to find what is at the top of the stack
int StackTop() {
    // If the stack is empty, print a message and return -1
    if (Head == nullptr) {
        cout << "Stack is empty.\n";
        return -1;
    }

    // Return the data value of the top node
    return Head->value;
}

// Display function to print the elements in the stack
void Display() {
    // If the stack is empty, print a message and return
    if (Head == nullptr) {
        cout << "Stack is empty.\n";
        return;
    }
    // Traverse the stack from top to bottom and print the data values of each node
    Node* temp = Head;
    while (temp != nullptr) {
        cout << temp->value << " ";
        temp = temp->next;
    }
    cout << "\n";
}

int main() {
    auto startTime = chrono::high_resolution_clock::now();
    push(9);
    push(11);
    push(5);
    pop();
    push(10);
    push(20);
    pop();
    push(23);
    push(6);
    pop();
    push(18);
    push(25);
    push(17);
    push(8);
    pop();
    push(10);
    push(50);
    push(11);
    pop();
    pop();
    push(14);
    push(30);
    push(6);
    push(18);
    push(20);
    pop();
    pop();
    push(17);
    push(8);
    push(0);
    push(5);
    push(18);
    push(14);
    pop();
    pop();
    push(2);
    pop();
    pop();
    push(6);
    push(18);
    push(2);
    push(7);
    push(8);
    push(10);
    pop();
    push(5);
    push(11);
    push(15);
    push(23);
    pop();
    pop();
    pop();
    push(6);
    push(18);
    pop();
    push(23);
    push(6);
    pop();
    push(18);
    push(25);
    push(17);
    push(8);
    pop();
    push(29);
    push(12);
    Display();
    pop();
    push(30);
    push(3);
    Display();
    push(4);
    push(30);
    pop();
    push(3);
    push(1);
    Display();
    auto endTime = chrono::high_resolution_clock::now();
    auto duration = chrono::duration_cast<chrono::microseconds>(endTime - startTime);
    cout << "Time taken for Stack using LinkedList: " << duration.count() << " microseconds.\n";
}
